# -*- coding: utf-8 -*-
"""Apriori.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tOetaomvY18WDuAxwHwt86bqcZELTxjo
"""

data = [
    ['M', 'O', 'N', 'K', 'E', 'Y'],
    ['D', 'O', 'N', 'K', 'E', 'Y'],
    ['M', 'A', 'K', 'E'],
    ['M', 'U', 'C', 'K', 'Y'],
    ['C', 'O', 'O', 'K', 'I', 'E']
]
data

C1 = {}
for s in data:
  for c in s:
    if c in C1:
      C1[c] += 1
    else :
      C1[c] = 1

C1

min_support = int(0.6*len(data))
min_support

L1 = {}
for x in C1.keys():
  if C1[x] >= min_support:
    L1[x] = C1[x]

L1

L1_list = list(L1)

L1_list

C2 = {}
for i in range(len(L1_list)):
  for j in range(i+1, len(L1_list)):
    curr = L1_list[i] + L1_list[j]
    for x in data:
      if( (L1_list[i] in x) and (L1_list[j] in x)):
        if(curr in C2):
          C2[curr] += 1
        else :
          C2[curr] = 1

C2

L2 = {}
for x in C2.keys():
  if C2[x] >= min_support:
    L2[x] = C2[x]

L2

L2_list = list(L2)

L2_list

C3 = {}
for i in range(len(L2_list)):
  for j in range(i+1, len(L2_list)):
    st = set()
    for c in L2_list[i]:
      st.add(c)
    for c in L2_list[j]:
      st.add(c)
    curr = ""
    for x in st:
      curr += x
    if(len(st) == 3):
      for x in st:
        ok = True
        for d in data:
          if(not (x in d)):
            ok = False
        if(ok):
          if(curr in C3):
            C3[curr] += 1
          else :
            C3[curr] = 1

C3

L3 = {}
for x in C3.keys():
  if C3[x] >= min_support:
    L3[x] = C3[x]

L3

P = list(L3.keys())[0]

#try LHS of size 2
for i in range(3):
  for j in range(i+1, 3):
    k = 0
    if(i==0 and j==1):
      k = 2
    elif(i==0 and j==2):
      k = 1
    else:
      k = 0
    LHS = P[i]+P[j]
    RHS = P[k]
    confidence = 0
    if(LHS in L2):
      confidence = (L3['KOE'] / L2[LHS])
    else :
      confidence = (L3['KOE'] / L2[P[j] + P[i]])
    print(LHS, " => ", RHS, " : ", confidence)

#try LHS of size 1
for i in range(3):
  RHS = ""
  if(i==0):
    RHS += P[1]
    RHS += P[2]
  elif(i==1):
    RHS += P[0]
    RHS += P[2]
  else :
    RHS += P[0]
    RHS += P[1]
  LHS = P[i]
  confidence = (L3['KOE'] / L1[LHS])
  print(LHS, " => ", RHS, " : ", confidence)

